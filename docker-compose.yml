version: '3.8'

services:
  postgres:
    image: postgres:13-alpine
    container_name: order-service-postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orders_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - order-service-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d orders_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.2.5
    container_name: order-service-redpanda
    command:
      - redpanda
      - start
      - --smp
      - '1'
      - --memory
      - 2G
      - --reserve-memory
      - 0M
      - --overprovisioned
      - --node-id
      - '0'
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr
      - PLAINTEXT://redpanda:9092
    ports:
      - "9092:9092"
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    networks:
      - order-service-network
    healthcheck:
      test: ["CMD", "rpk", "cluster", "health"]
      interval: 10s
      timeout: 20s
      retries: 10
      start_period: 30s

  app:
    build: .
    container_name: order-service-app
    environment:
      DB_HOST: postgres
      KAFKA_BROKERS: redpanda:9092
      HTTP_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redpanda
    networks:
      - order-service-network


  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: order-service-kafka-ui
    depends_on:
      redpanda:
        condition: service_healthy
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: redpanda:9092
    networks:
      - order-service-network

volumes:
  postgres_data:
    driver: local
  redpanda_data:
    driver: local

networks:
  order-service-network:
    driver: bridge